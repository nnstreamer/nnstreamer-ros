name: TC runner

on:
  push:
    branches: main
  pull_request:
    branches: main

jobs:
  run-testcases:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-16.04, ubuntu-18.04]
        ros_distro: ['kinetic', 'melodic', 'eloquent']
        exclude:
          - os: ubuntu-16.04
            ros_distro: 'melodic'
          - os: ubuntu-16.04
            ros_distro: 'eloquent'
          - os: ubuntu-18.04
            ros_distro:  'kinetic'
    steps:
      - name: Check out repository
        uses: actions/checkout@v2
      - name: Resolve build dependencies
        run: |
          sudo add-apt-repository ppa:nnstreamer/ppa -y
          sudo sh -c 'echo "deb http://packages.ros.org/ros/ubuntu $(lsb_release -sc) main" > /etc/apt/sources.list.d/ros-latest.list'
          sudo sh -c 'echo "deb http://packages.ros.org/ros2/ubuntu $(lsb_release -sc) main" > /etc/apt/sources.list.d/ros2-latest.list'
          sudo apt-key adv --keyserver 'hkp://keyserver.ubuntu.com:80' --recv-key C1CF6E31E6BADE8868B172B4F42ED6FBAB17C654
          sudo apt-key adv --keyserver 'hkp://keyserver.ubuntu.com:80' --recv-key CADA0F77901522B3
          curl -s https://raw.githubusercontent.com/ros/rosdistro/master/ros.asc | sudo apt-key add -
          sudo apt update
          sudo apt install -y build-essential bsdmainutils cmake libgstreamer1.0-dev \
            libgstreamer-plugins-base1.0-dev libglib2.0-dev gstreamer1.0-plugins-base \
            lcov gstreamer1.0-tools libgtest-dev ssat python2.7 nnstreamer-dev
          if [[ ${{matrix.ros_distro}} == "eloquent" ]]
          then
            sudo apt install -y ros-${{matrix.ros_distro}}-ament-cmake \
              ros-${{matrix.ros_distro}}-pluginlib \
              ros-${{matrix.ros_distro}}-rcutils \
              ros-${{matrix.ros_distro}}-rclcpp \
              ros-${{matrix.ros_distro}}-std-msgs \
              ros-${{matrix.ros_distro}}-rosbag2 \
              ros-${{matrix.ros_distro}}-rosbag2-storage \
              ros-${{matrix.ros_distro}}-rosbag2-storage-default-plugins \
              ros-${{matrix.ros_distro}}-sqlite3-vendor \
              ros-${{matrix.ros_distro}}-rosbag2-converter-default-plugins \
              ros-${{matrix.ros_distro}}-rmw-fastrtps-cpp \
              ros-${{matrix.ros_distro}}-rosidl-default-generators \
              ros-${{matrix.ros_distro}}-ament-lint-auto \
              ros-${{matrix.ros_distro}}-ros-environment \
              ros-${{matrix.ros_distro}}-ament-lint-cmake
          else
            sudo apt install -y ros-${{matrix.ros_distro}}-catkin \
              ros-${{matrix.ros_distro}}-cmake-modules \
              ros-${{matrix.ros_distro}}-genmsg \
              ros-${{matrix.ros_distro}}-message-generation \
              ros-${{matrix.ros_distro}}-message-generation \
              ros-${{matrix.ros_distro}}-roscpp \
              ros-${{matrix.ros_distro}}-rosbag
          fi
      - name: Create build directory
        shell: bash
        run: |
          source /opt/ros/${{matrix.ros_distro}}/setup.sh
          cmake -E make_directory ${{runner.workspace}}/build
      - name: Configure CMake
        shell: bash
        working-directory: ${{runner.workspace}}/build
        run: |
          source /opt/ros/${{matrix.ros_distro}}/setup.sh
          cmake $GITHUB_WORKSPACE -DCMAKE_BUILD_TYPE=$BUILD_TYPE -DROS_VERSION=${{matrix.ros_distro}} -DENABLE_COV=TRUE
      - name: Make
        shell: bash
        working-directory: ${{runner.workspace}}/build
        run: |
          source /opt/ros/${{matrix.ros_distro}}/setup.sh
          make -j
      - name: Run the TCs
        shell: bash
        run: |
          source /opt/ros/${{matrix.ros_distro}}/setup.sh
          export GST_PLUGIN_PATH=${{runner.workspace}}/build/gst/tensor_ros_sink:${{runner.workspace}}/build/gst/tensor_ros_src
          if [[ ${ROS_VERSION} == "2" ]]
          then
            export LD_LIBRARY_PATH=${{runner.workspace}}/build/ros2:${LD_LIBRARY_PATH}
            ${{runner.workspace}}/build/tests/tensor_ros_sink/unittest_tensor_ros2_sink
            ${{runner.workspace}}/build/tests/tensor_ros_src/unittest_tensor_ros2_src
          else
            export LD_LIBRARY_PATH=${{runner.workspace}}/build/devel/lib:${LD_LIBRARY_PATH}
            ${{runner.workspace}}/build/tests/tensor_ros_sink/unittest_tensor_ros_sink
            ${{runner.workspace}}/build/tests/tensor_ros_src/unittest_tensor_ros_src
            cd tests && ssat
          fi
      - name: Run lcov
        shell: bash
        run: |
          rm -rf coverage && mkdir -p coverage
          lcov -t 'NNStreamer-ROS Unit Test Coverage' -o unittest.info -c -d ${{runner.workspace}}/build -b . --no-external
          lcov -r unittest.info "*/tests/*" "*rosidl_generator*/*" "*rosidl_typesupport*/*" "*.h" -o coverage/lcov.info
      - name: Coveralls Parallel
        if: ${{ github.event_name == 'push' }}
        uses: coverallsapp/github-action@master
        with:
          github-token: ${{ secrets.github_token }}
          flag-name: run-${{matrix.os}}-${{matrix.ros_distro}}
          parallel: true
  finish:
    needs: run-testcases
    runs-on: ubuntu-latest
    steps:
      - name: Coverall
        if: ${{ github.event_name == 'push' }}
        uses: coverallsapp/github-action@master
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          parallel-finished: true
